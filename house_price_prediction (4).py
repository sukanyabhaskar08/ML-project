# -*- coding: utf-8 -*-
"""house price prediction

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1I_lMY8fIjJnBC7Q0UB4eKV1qOJS_ouFQ
"""

!pip install xgboost seaborn

#  Import libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, MinMaxScaler
from sklearn.metrics import mean_squared_error
from xgboost import XGBRegressor

import pandas as pd
path="/content/AmesHousing (1).csv"
data=pd.read_csv(path)
print(data)

#  Basic info
print("Dataset shape:", data.shape)
print("Columns:", data.columns.tolist())

data.head()

data.isnull().sum()

data['Lot Frontage'].fillna(data['Lot Frontage'].mode()[0],inplace=True)

data.isnull().sum()

# Encode categorical variables
le = LabelEncoder()
for col in data.columns:
    if data[col].dtype == "object":
        data[col] = le.fit_transform(data[col])

#  Visualize normalized features (for learning)
scaler = MinMaxScaler()
scaled_data = pd.DataFrame(scaler.fit_transform(data), columns=data.columns)

plot_cols = ['Lot Area', 'Gr Liv Area', 'Total Bsmt SF', 'SalePrice']
plot_cols = [col for col in plot_cols if col in scaled_data.columns]

plt.figure(figsize=(10, 5))
sns.boxplot(data=scaled_data[plot_cols])
plt.title("Normalized Feature Distribution")
plt.grid()
plt.show()

#  Split features and target
target_col = 'SalePrice'
X = data.drop(target_col, axis=1)
y = data[target_col]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train XGBoost Model with Tuned Parameters
xgb_model = XGBRegressor(
    n_estimators=250,
    learning_rate=0.07,
    max_depth=6,
    subsample=0.8,
    colsample_bytree=0.8,
    random_state=42
)

xgb_model.fit(X_train, y_train)

#  Evaluate the model
y_pred = xgb_model.predict(X_test)
rmse = np.sqrt(mean_squared_error(y_test, y_pred))
print(f" RMSE of the XGBoost model: {rmse:.2f}")

#  Plot predicted vs actual prices
plt.figure(figsize=(8, 6))
plt.scatter(y_test, y_pred, alpha=0.6, color='teal')
plt.xlabel("Actual Sale Price")
plt.ylabel("Predicted Sale Price")
plt.title("Actual vs Predicted House Prices")
plt.grid(True)
plt.plot([y.min(), y.max()], [y.min(), y.max()], color='red', linestyle='--')
plt.show()

# : Feature Importance
plt.figure(figsize=(10, 6))
xgb_model.feature_importances_.argsort()
feat_imp = pd.Series(xgb_model.feature_importances_, index=X.columns)
feat_imp.nlargest(20).plot(kind='barh', color='skyblue')
plt.title("Top 20 Feature Importances - XGBoost")
plt.xlabel("Importance")
plt.grid()
plt.tight_layout()
plt.show()

#  Residuals Plot
residuals = y_test - y_pred
plt.figure(figsize=(10, 5))
sns.histplot(residuals, bins=30, kde=True, color='coral')
plt.title("Distribution of Residuals (Actual - Predicted)")
plt.xlabel("Residual")
plt.grid()
plt.show()

#  Prediction Error (Actual vs Predicted)
plt.figure(figsize=(8, 6))
sns.scatterplot(x=y_test, y=y_pred, color='navy')
plt.plot([y.min(), y.max()], [y.min(), y.max()], color='red', linestyle='--')
plt.xlabel("Actual Sale Price")
plt.ylabel("Predicted Sale Price")
plt.title("Prediction Error Plot")
plt.grid(True)
plt.tight_layout()
plt.show()

#  Overlayed Histogram for Actual vs Predicted
plt.figure(figsize=(10, 5))
sns.histplot(y_test, label="Actual", kde=True, color='green', alpha=0.6)
sns.histplot(y_pred, label="Predicted", kde=True, color='orange', alpha=0.6)
plt.title("Actual vs Predicted Price Distribution")
plt.xlabel("Sale Price")
plt.legend()
plt.grid()
plt.show()

from sklearn.metrics import r2_score, mean_squared_error
import numpy as np

# Evaluate the model
r2 = r2_score(y_test, y_pred)
rmse = np.sqrt(mean_squared_error(y_test, y_pred))

print(" Final Model Evaluation:")
print(f" RÂ² Score (Accuracy): {r2:.4f}")
print(f" RMSE (Error in Price): {rmse:.2f}")

